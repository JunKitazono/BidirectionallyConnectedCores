function probs = Cov_comp(X,tau,isjoint)
%-----------------------------------------------------------------------
% FUNCTION: Cov_comp.m
% PURPOSE: Compute covarance matrices from time series data X
%
% INPUTS:
%           X: time series data in the form (units X time)
%           tau: time lag between past and present states
%           params.number_of_states: number of states (only for the discrete case)
%           
%           options: options for computing phi
%           
%           options.type_of_dist:
%              'Gauss': Gaussian distribution
%              'discrete': discrete probability distribution
%           options.type_of_phi:
%              'SI': phi_H, stochastic interaction
%              'Geo': phi_G, information geometry version
%              'star': phi_star, based on mismatched decoding
%              'MI': Multi (Mutual) information, I(X_1, Y_1; X_2, Y_2)
%              'MI1': Multi (Mutual) information. I(X_1; X_2). (IIT1.0)
%           
%
% OUTPUT:
%           phi: integrated information
%-----------------------------------------------------------------------


T = size(X,2);

if isjoint
    t_range1 = 1: 1: T-tau;
    t_range2 = 1+tau: 1: T;
    
    X1 = X(:,t_range1);
    X1 = bsxfun(@minus, X1, mean(X1,2)); % subtract mean
    X2 = X(:,t_range2);
    X2 = bsxfun(@minus, X2, mean(X2,2)); % subtract mean
    
    Cov_X = X1*X1'/(T-tau-1); % equal-time covariance matrix at "PAST"
    Cov_Y = X2*X2'/(T-tau-1); % equal-time covariance matrix at "PRESENT"
    Cov_XY = X1*X2'/(T-tau-1); % time-lagged covariance matrix
    
    probs.Cov_Y = Cov_Y;
    probs.Cov_XY = Cov_XY;
else
    X = bsxfun(@minus, X, mean(X,2)); % subtract mean
    Cov_X = X*X'/(T-1); % equal-time covariance matrix
end

probs.Cov_X = Cov_X;

end